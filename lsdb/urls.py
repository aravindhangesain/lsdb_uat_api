from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework.routers import DefaultRouter
from rest_framework.authtoken import views as rest_framework_views

from lsdb.views import *

router = DefaultRouter()
# router.register(r'action_completion_definitions', ApiRequestLogViewSet)
router.register(r'action_completion_definitions', ActionCompletionDefinitionViewSet)
router.register(r'action_definitions', ActionDefinitionViewSet)
router.register(r'action_results', ActionResultViewSet)
router.register(r'api_log', ApiRequestLogViewSet)
router.register(r'asset_capacities', AssetCapacityViewSet)
router.register(r'asset_types' , AssetTypeViewSet)
router.register(r'assets' , AssetViewSet)
router.register(r'available_defects' , AvailableDefectViewSet)
router.register(r'azure_files' , AzureFileViewSet)
router.register(r'module_properties' , ModulePropertyViewSet)
router.register(r'condition_definitions' , ConditionDefinitionViewSet)
router.register(r'crates' , CrateViewSet)
router.register(r'customers' , CustomerViewSet)
router.register(r'disposition_codes' , DispositionCodeViewSet)
router.register(r'dispositions' , DispositionViewSet)
router.register(r'expected_unit_types' , ExpectedUnitTypeViewSet)
router.register(r'file_formats', FileFormatViewSet)
router.register(r'forgot_password', ForgotPasswordViewSet)
router.register(r'group_types' , GroupTypeViewSet)
router.register(r'groups' , GroupViewSet)
router.register(r'labels' , LabelViewSet)
router.register(r'limit_comparison_modes' , LimitComparisonModeViewSet)
router.register(r'limit_comparisons' , LimitComparisonViewSet)
router.register(r'limits' , LimitViewSet)
router.register(r'locations', LocationViewSet)
router.register(r'manage_results',ManageResultViewSet, basename='manageresults')
router.register(r'measurement_definitions' , MeasurementDefinitionViewSet)
router.register(r'measurement_result_types' , MeasurementResultTypeViewSet)
router.register(r'measurement_results' , MeasurementResultViewSet)
router.register(r'measurement_types' , MeasurementTypeViewSet)
router.register(r'module_technologies' , ModuleTechnologyViewSet)
router.register(r'notes', NoteViewSet)
router.register(r'note_types', NoteTypeViewSet)
router.register(r'noop', NoopViewSet)
router.register(r'organizations' , OrganizationViewSet)
# router.register(r'out_of_family_limits', OutOfFamilyLimitViewSet)
router.register(r'plugins' , PluginViewSet)
router.register(r'permission_types' , PermissionTypeViewSet)
router.register(r'permissions' , PermissionViewSet)
router.register(r'permitted_views' , PermittedViewViewSet)
router.register(r'procedure_definitions' , ProcedureDefinitionViewSet)
router.register(r'procedure_results' , ProcedureResultViewSet)
router.register(r'projects' , ProjectViewSet)
router.register(r'properties' , PropertyViewSet)
router.register(r'si_prefixes' , SiPrefixViewSet)
router.register(r'signin', SignInViewSet)
router.register(r'step_definitions' , StepDefinitionViewSet)
router.register(r'step_results' , StepResultViewSet)
router.register(r'step_types' , StepTypeViewSet)
router.register(r'templates' , TemplateViewSet)
router.register(r'test_sequence_definitions' , TestSequenceDefinitionViewSet)
router.register(r'unit_type_families' , UnitTypeFamilyViewSet)
router.register(r'unit_type_property_data_types' , UnitTypePropertyDataTypeViewSet)
router.register(r'unit_type_property_results' , UnitTypePropertyResultViewSet)
router.register(r'unit_type_property_types' , UnitTypePropertyTypeViewSet)
router.register(r'unit_types' , UnitTypeViewSet)
router.register(r'units' , UnitViewSet)
router.register(r'user_profiles' , UserProfileViewSet)
router.register(r'users', UserViewSet)
router.register(r'user_registration_statuses' , UserRegistrationStatusViewSet)
router.register(r'visualizers' , VisualizerViewSet)
router.register(r'work_orders' , WorkOrderViewSet)
router.register(r'getnotecount',GetNoteCountViewSet, basename = 'getnotecount')
router.register(r'updateproject',UpdateProjectDetailsViewSet, basename = 'updateproject')
router.register(r'projectmodifieddetails',ProjectModifiedDetailsViewSet, basename= 'projectmodifieddetails')
router.register(r'failedprojectreport',FailedProjectReportViewSet, basename='failedprojectreport')
router.register(r'procedure_results_verify',verifyViewSet, basename = 'procedure_results_verify')
router.register(r'count',CountViewSet,basename='count')
router.register(r'engineeringagenda', EngineeringAgendaViewSet, basename='engineeringagenda')
router.register(r'activeprojectreport',ActiveProjectsReportViewSet, basename = 'activeprojectreport')
router.register(r'dispositionbulkupdate',DispositionBulkUpdateViewSet, basename = 'dispositionbulkupdate')
router.register(r'projectdisposition',ProjectDispositionViewSet, basename ='projectdisposition')
router.register(r'updateprojectforcustomer', UpdateProjectforCustomerViewSet, basename = 'updateprojectforcustomer')
router.register(r'new_crates', NewCrateIntakeViewSet, basename = 'new_crates')
router.register(r'crate_intake_images', CrateIntakeImagesViewSet, basename = 'crate_intake_images')
router.register(r'moduleintake', ModuleIntakeViewSet, basename = 'moduleintake')
router.register(r'getmodeltype', GetModelTypeViewSet, basename = 'getmodeltype')
router.register(r'getmoduledetails', GetModuleDetailsViewSet, basename = 'getmoduledetails')
router.register(r'moduleintakedetails', ModuleIntakeDetailsViewSet, basename = 'moduleintakedetails')
router.register(r'moduleintakegrid', ModuleIntakeGridViewSet, basename = 'moduleintakegrid')
router.register(r'crateintakegrid', CrateIntakeGridViewSet, basename = 'crateintakegrid')
router.register(r'module_intake_images', ModuleIntakeImagesViewSet, basename='module_intake_images')
router.register(r'scanned_pannels', ScannedPannelsViewSet, basename='scanned_pannels')
router.register(r'test-type', TestTypeViewSet, basename='test-type')
router.register(r'bulk_insert_for_scanned_panel',BulkInsertforScannedpanelsViewSet, basename='bulk_insert_for_scanned_panel')
router.register(r'get_all_module_details',GetAllModuleDetailsViewSet,basename = 'get_all_module_details')
router.register(r'get_all_crate_details',GetAllCrateDetailsViewSet,basename = 'get_all_crate_details')
router.register(r'module_inventory',ModuleInventoryViewSet,basename='module_inventory')
router.register(r'intake_images_info',IntakeImagesInfoViewSet, basename='intake_images_info')
router.register(r'step_result_notes',StepResultNotesViewSet, basename='step_result_notes')
router.register(r'crate_update',CrateUpdateViewSet, basename='crate_update')
router.register(r'module_update',ModuleUpdateViewSet,basename='module_update')
router.register(r'flash_test',FlashTestViewSet,basename='flash_test')
router.register(r'procedureflagupdate',ProcedureflagupdateViewSet, basename = 'procedureflagupdate')
router.register(r'location_log',LocationLogViewSet,basename='location_log')
router.register(r'measurement_correctionfactor',MeasurementCorrectionFactorViewSet,basename='measurement_correctionfactor')
router.register(r'cron',CronStatusViewSet,basename='cron')
router.register(r'template_master',TemplateMasterViewSet,basename='template_master')
router.register(r'template_details',TemplateDetailsViewSet,basename='template_details')
router.register(r'producttypedefinition',ProductTypeDefinitionViewSet,basename='producttypedefinition')
router.register(r'reporttypedefinition',ReportTypeDefinitionViewSet,basename='reporttypedefinition')
router.register(r'reportexecutionorder',ReportExecutionOrderViewSet,basename='reportexecutionorder')
router.register(r'reportsequencedefinition',ReportSequenceDefinitionViewSet,basename='reportsequencedefinition')
router.register(r'reportresult',ReportResultViewSet,basename='reportresult')
router.register(r'workordertemplate',WorkOrderTemplateViewSet,basename='workordertemplate')
router.register(r'finalprocedure',FinalProcedureViewSet,basename='finalprocedure')
router.register(r'unittypetemplate',UnitTypeTemplateViewSet,basename='unittypetemplate')
router.register(r'uvid-flash-report',UVIDandFlashReportViewSet, basename = 'uvid-flash-report')
router.register(r'assetcalibration',AssetCalibrationViewSet, basename = 'assetcalibration')
router.register(r'getcalibrationdetails',GetAssetCalibrationDetailsViewSet,basename = 'getcalibrationdetails')
router.register(r'hailtest',HailTestViewSet, basename = 'hailtest')
router.register(r'projecttemplate',ProjectTemplateViewSet, basename = 'projecttemplate')
router.register(r'xlfileread',XlfilereadViewSet)
router.register(r'Visualnspection',VisualInspectionViewSet)
router.register(r'iamfileread',IAMFileReadViewSet)
router.register(r'reportfiletemplate',ReportFileTemplateViewSet,basename = 'reportfiletemplate')
router.register(r'reportwriteragenda',ReportWriterAgendaViewSet, basename='reportwriteragenda')
router.register(r'reportapproveragenda',ReportApproverAgendaViewSet,basename='reportapproveragenda')
router.register(r'reportnotes',ReportNotesViewSet,basename='reportnotes')
router.register(r'reportapprovernotes',ReportApproverNoteViewSet, basename='reportapprovernotes')
router.register(r'reportteam', ReportTeamViewSet, basename='reportteam')
router.register(r'iv_el_inprogress',IVandEL_InProgressViewSet,basename = 'iv_el_inprogress')
router.register(r'writer_history',ReportWriterAgendaHistoryViewSet,basename='writer_history')
router.register(r'delivered_report',DeliveredReportViewSet,basename='delivered_report')
router.register(r'newflashtest',NewFlashTestViewSet,basename='newflashtest')
router.register(r'flashtestdetails',NewFlashTestDetailsViewSet , basename = 'flashtestdetails')
router.register(r'projecttypedetails',ProjectTypeDetailsViewSet, basename='projecttypedetails')
router.register(r'assethistory', AssetHistoryViewSet, basename='assethistory')
router.register(r'checklist',CheckListViewSet,basename='checklist')
router.register(r'checklistreport',ChecklistReportViewSet,basename='checklistreport')
router.register(r'reportchecklistdata',ReportChecklistDataViewSet,basename='reportchecklistdata')
router.register(r'reportchecklistnote',ReportChecklistNoteViewSet,basename='reportchecklistnote')
router.register(r'subasset',SubAssetViewSet,basename='subasset')
router.register(r'asset_subasset',AssetSubAssetViewSet,basename='asset_subasset')
router.register(r'stress_run_result',StressRunResultViewSet,basename='stress_run_result')
router.register(r'projectdownload',ProjectdownloadViewSet, basename = 'projectdownload')
router.register(r'project_factory_witness',ProjectFactoryWitnessViewSet, basename = 'project_factory_witness')
router.register(r'traveler_pdf',TravelerPdfViewSet, basename = 'traveler_pdf')
router.register(r'asset_last_action',AssetLastActionDetailsViewSet,basename='asset_last_action')
router.register(r'retest_required_report',RetestReportListViewSet,basename='retest_required_report')



# router.register(r'IAMTest',IAMTestViewSet, basename = 'IAMTest')
# router.register(r'IAMTestFileUpload',IAMTestFileUploadViewSet, basename = 'IAMTestFileUpload')
# router.register(r'upload',FileUploadViewSet,basename='upload')
# router.register(r'flashupload',FileUploadforFlashViewSet,basename='flashupload')
# router.register(r'downloadflashfile',FlashFileDownloadViewSet, basename = 'downloadflashfile')
# router.register(r'shipping_form',ShippingFormViewSet,basename='shipping_form')
# router.register(r'customer_pichina',Customer_pichinaViewSet, basename = 'customer_pichina')
# router.register(r'unittype_pichina',UnitType_pichinaViewSet,basename='unittype_pichina')
# router.register(r'disposition_pichina',ProjectDisposition_pichinaViewSet,basename = 'disposition_pichina')
# router.register(r'project_pichina',Project_pichinaViewSet, basename = 'project_pichina')
# router.register(r'disposition_Pichina',Disposition_PichinaViewSet,basename = 'disposition_Pichina')
# router.register(r'workorder_pichina',Workorder_pichinaViewSet,basename = 'workorder_pichina')
# router.register(r'expectedunittype_pichina',ExpectedUnitType_pichinaViewSet, basename = 'expectedunittype_pichina')
# router.register(r'authuser_pichina',AuthUser_pichinaViewSet,basename = 'authuser_pichina')
# router.register(r'unit_pichina',Unit_pichinaViewSet, basename = 'unit_pichina')
# router.register(r'testsequencedefinition_pichina',TestSequenceDefinition_pichinaViewSet,basename= 'testsequencedefinition_pichina')
# router.register(r'location_pichina',Location_pichinaViewSet, basename = 'location_pichina')
# router.register(r'manage_results_pichina',ManageResults_pichinaViewSet,basename = 'manage_results_pichina')
# router.register(r'asset_pichina',Asset_pichinaViewSet,basename = 'asset_pichina')
# router.register(r'moduleproperty_pichina',ModuleProperty_pichinaViewSet, basename ='moduleproperty_pichina')
# router.register(r'moduletechnology_pichina',ModuleTechnology_pichinaViewSet,basename = 'moduletechnology_pichina')
# router.register(r'measurementresult_pichina',MeasurementResult_pichinaViewSet,basename = 'measurementresult_pichina')
# router.register(r'stepresult_pichina',StepResult_pichinaViewSet,basename = 'stepresult_pichina')
# router.register(r'measurementdefinition_pichina',MeasurementDefinition_pichinaViewSet,basename = 'measurementdefinition_pichina')
# router.register(r'steptype_pichina',StepType_pichinaViewSet,basename = 'steptype_pichina')
# router.register(r'measurementtype_pichina',MeasurementType_pichinaViewSet,basename = 'measurementtype_pichina')
# router.register(r'measurementresulttype_pichina',MeasurementResultType_pichinaViewSet,basename = 'measurementresulttype_pichina')
# router.register(r'procedureresult_pichina',ProcedureResult_pichinaViewSet,basename = 'procedureresult_pichina')
# router.register(r'stepdefinition_pichina',StepDefinition_pichinaViewSet,basename = 'stepdefinition_pichina')
# router.register(r'proceduredefinition_pichina',ProcedureDefinition_pichinaViewSet, basename = 'proceduredefinition_pichina')
# router.register(r'azurefile_pichina',AzureFile_pichinaViewSet,basename = 'azurefile_pichina')
# router.register(r'availabledefect_pichina',AvailableDefect_pichinaViewSet,basename = 'availabledefect_pichina')
# router.register(r'deletemoduleintake',DeleteModuleIntakeIDViewSet,basename = 'deletemoduleintake')
# router.register(r'deliverablescoverdata',GetDeliverablesCoverPageViewSet, basename = 'deliverablescoverdata')
# router.register(r'getproceduredefinitionlist',GetProcedureDefinitionListViewSet, basename = 'getproceduredefinitionlist')
# router.register(r'flashdatadeliverables',GetDeliverablesDataViewSet, basename = 'flashdatadeliverables')
# router.register(r'download_deliverable_data',PdfViewSet, basename = 'download_deliverable_data')
# router.register(r'note_pichina',Note_pichinaViewSet,basename='note_pichina')
# router.register(r'end',EndProcedureViewSet,basename='end')
# router.register(r'notetype_pichina',Notetype_PichinaViewSet,basename='notetype_pichina')
# router.register(r'procupdate',ProcedureUpdateViewSet, basename = 'procupdate')
# router.register(r'IAMMetaData',IAMMetaDataViewSet, basename = 'IAMMetaData')




# app_name='lsdb'
urlpatterns =[
    # url(r'^admin/', include(admin.site.urls)),
    # url(r'^azure/', include('azure_ad_auth.urls')),
    # url(r'^login_successful/$', login_successful, name='login_successful'),
    path('', include(router.urls)),
    path('api-auth/', include('rest_framework.urls')),

]
